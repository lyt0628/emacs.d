:PROPERTIES:
:ID:       af09a03e-aeef-4fff-a328-89bb3a2a8746
:header-args: :noweb yes :dir ./ytcg/src
:END:
#+title: cg-matrix-test
#+filetags: :lua:linear:test:

* Header
:PROPERTIES:
:header-args: :eval no :noweb-ref M
:END:

#+begin_src lua :noweb eval
  require("Mat")
#+end_src

* get()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {2, 1},
  })
  print(m:get(1, 1),m:get(1, 2))
  print(m:get(2, 1),m:get(2, 2))
#+end_src

#+RESULTS:
: 1	2
: 2	1

* with()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {2, 1},
  })
  m = m:with(1, 1, 2)

  print(m:get(1, 1))
#+end_src

#+RESULTS:
: 2

* with_row()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {2, 1},
  })
  v = Vec.new(8, 9)
  m = m:with_row(1,  v)

  print(m[1][1], m[1][2])
  print(m[2][1], m[2][2])
#+end_src

#+RESULTS:
: 8	9
: 2	1

* with_col()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {2, 1},
  })
  v = Vec.new(8, 9)
  m = m:with_col(1,  v)

  print(m[1][1], m[1][2])
  print(m[2][1], m[2][2])
#+end_src

#+RESULTS:
: 8	2
: 9	1


* rows() and cols()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2, 3},
      {3, 2, 1}
  })
  print(m:row(1)[3],m:col(1)[2])
#+end_src

#+RESULTS:
: 3	3


* rows() and cols()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {1, 2},
      {1, 2},
      {1, 2}
  })
  print(m:rows(),m:cols())
#+end_src

#+RESULTS:
: 4	2

* __index
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2, 3},
      {3, 2, 1}
  })
  print(m[1][3],m[2][1])
#+end_src

#+RESULTS:
: 3	3

* add()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {1, 2},
  })
  m = m:add(m)
  print(m:rows(),m:cols())
#+end_src

#+RESULTS:
: 2	2

* sub()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {1, 2},
  })
  m = m:sub(m)
  print(m:rows(),m:cols())
#+end_src

#+RESULTS:
: 2	2

* __add
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {1, 2},
  })
  m2 = Mat.new({
      {1, 2},
      {1, 2},
  })
  m = m + m2
  print(m:rows(),m:cols())
#+end_src

#+RESULTS:
: 2	2

* __add
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2},
      {1, 2},
  })

  m = m:scale(2)
  print(m[1][1],m[1][2])
  print(m[2][1],m[2][2])
#+end_src

#+RESULTS:
: 2	4
: 2	4

* T()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  m = m:T()
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 1	2	11
: 6	2	4
: 3	9	10

* mul()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  m = m:mul(m)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 46	30	87
: 105	52	114
: 129	114	169

* augmented()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  v = Vec.new(12,3,9)
  m = m:augmented({v})
  print(m[1][1],m[1][2], m[1][3], m[1][4])
  print(m[2][1],m[2][2], m[2][3], m[2][4])
  print(m[3][1],m[3][2], m[3][3], m[3][4])
#+end_src

#+RESULTS:
: 1	6	3	12
: 2	2	9	3
: 11	4	10	9

* __concat
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  v = Vec.new(12,3,9)
  m = m .. v
  print(m[1][1],m[1][2], m[1][3], m[1][4])
  print(m[2][1],m[2][2], m[2][3], m[2][4])
  print(m[3][1],m[3][2], m[3][3], m[3][4])

  m = m .. m
  print(m:rows(), m:cols())
#+end_src

#+RESULTS:
: 1	6	3	12
: 2	2	9	3
: 11	4	10	9
: 3	8

* swap_row()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  m = m:swap_row(1,3)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 11	4	10
: 2	2	9
: 1	6	3

* scale_row()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })

  m = m:scale_row(1,3)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 3	18	9
: 2	2	9
: 11	4	10

* add_to_row()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3},
      {2, 2, 9},
      {11, 4, 10},
  })
  v = Vec.new(100, 100, 100)
  m = m:add_to_row(2, v)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 1	6	3
: 102	102	109
: 11	4	10

* cofactor()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3, 9},
      {2, 2, 9, 5},
      {11, 4, 10, 6},
      {1, 6, 0, 1},
  })

  m = m:cofactor(1,3)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: 2	2	5
: 11	4	6
: 1	6	1

* algebraic_cofactor()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3, 9},
      {2, 2, 9, 5},
      {11, 4, 10, 6},
      {1, 6, 0, 1},
  })

  m = m:algebraic_cofactor(2,3)
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: -1.0	-6.0	-9.0
: 11	4	6
: 1	6	1

* det()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 3, 9},
      {2, 2, 9, 5},
      {11, 4, 10, 6},
      {1, 6, 0, 1},
  })

  print(m:det())
#+end_src

#+RESULTS:
: -2956.0

* inverse()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 1},
      {2, 2, 1},
      {11, 6, 10},
  })

  m = m:inverse()
  
  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
#+end_src

#+RESULTS:
: -0.28	1.08	-0.08
: 0.18	0.02	-0.02
: 0.2	-1.2	0.2

* __pow
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 1},
      {2, 2, 1},
      {11, 6, 10},
  })

  m = (m ^ -1) ^ 2 + m

  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])
  print(m:det())
#+end_src

#+RESULTS:
: 1.2568	5.8152	0.9848
: 1.9492	2.2188	0.9812
: 10.768	5.952	10.048
: -43.8768

* __mul
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 6, 1},
      {2, 2, 1},
      {11, 6, 10},
  })

  m = m * m

  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])


  v = Vec.new(1, 2, 3)
  v = m * v
  print(v[1],v[2],v[3])
#+end_src

#+RESULTS:
: 24	24	17
: 17	22	14
: 133	138	117
: 123	103	760

* simplified()

#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2, 3},
      {1, 2, 3},
      {2, 2, 1},
  })

  m = m:simplified()

  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])
  print(m[3][1],m[3][2], m[3][3])


#+end_src

#+RESULTS:
: 1	2	3
: -0.0	1.0	2.5
: 0	0	0

* reduced()
#+begin_src lua
  <<M>>
  m = Mat.new({
      {1, 2, 3},
      {2, 2, 1},
  })

  m = m:reduced()

  print(m[1][1],m[1][2], m[1][3])
  print(m[2][1],m[2][2], m[2][3])


  
#+end_src

#+RESULTS:
: 1.0	0.0	-2.0
: -0.0	1.0	2.5

* ortho()
#+begin_src lua
  <<M>>
  m = Mat.new({
    {1, 0, 0},
    {0, 1, 0},
    {0, 0, 0}
  })
  v = m:ortho()
  print(v[1],v[2], v[3])

  v2 = Vec.new(1, 0, 0)
  v3 = Vec.new(0, 1, 0)
  print(v:dot(v2))
  print(v:dot(v3))
#+end_src

#+RESULTS:
: 0	0	1
: 0
: 0

* rank()
#+begin_src lua
  <<M>>
  m = Mat.new({
    {1, 1},
    {2, 2},
    {3, 3}
  })
  print(m:rank())


#+end_src

#+RESULTS:
: 1

