:PROPERTIES:
:ID:       6d78a534-2786-4825-97d6-9bfd72086a7f
:header-args: :tangle hs/Quaternion.hs :comments both
:END:
#+title: cg/quaternion/hs

#+BEGIN_SRC haskell
  module Quaternion where
  import qualified Vector as V
#+END_SRC
dot 和 向量点积重名，因此限定为V 来避免名称冲突.

#+BEGIN_SRC haskell
  data Quaternion a = Quaternion V.Vec3D a deriving(Eq,Show,Functor) 
#+END_SRC
我们使用 Vec3D 用来表示虚部，a 用于表示实部.

Quaternion 的四则运算也是分量运算, 因此可以定义为函子.

Quternion 是3D 范围的，不需要用到 GADT, 因此直接使用函数定义就好了.
不需要使用类型类.


#+BEGIN_SRC haskell
  dot :: Num a => Quternion a -> Quternion a -> a
  dot (Quaternion v1 w1) (Quaternion v2 w2)= (V.dot v1 v2) + w1*w2 
#+END_SRC

#+BEGIN_SRC haskell
  norm :: Floating a => Quaternion a -> Quaternion a
  norm q = (((/)(dot q q)) <$> q)
#+END_SRC

#+BEGIN_SRC haskell
  toTransform :: Quaternion a -> Transform3D a
#+END_SRC

#+BEGIN_SRC haskell
  slerp :: Floating a => a -> Quaternion a -> Quaternion -> Quaternion a
#+END_SRC
