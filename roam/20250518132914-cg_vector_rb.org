:PROPERTIES:
:ID:       2b6bcd7c-848a-4ebf-96a9-e17c4d931e5a
:header-args: :noweb yes
:END:
#+title: cg/vector/rb

选择合适的语言做合适的事情.
1. webapp, ruby/Java
2. 笔记理论, ruby/Haskell
3. UI, TS/C#(On Windows)/Java(On Android)/C++(On QT)
4. ASM/C 嵌入式程序


为什么选择 Ruby 和 Haskell.
最关键的是两者代码都少.


* Define Vec Class Dynamic
#+BEGIN_SRC ruby :tangle rb/cg/vector.rb :noweb yes
  module CG
    <<#Vector Behavior>>
    def self.define_vector(dimensions)
      klass = Class.new do
        include VectorBehavior

        define_method :initialize do |*coordinates|
          #TODO: Check Dimensions

          coordinates.each_with_index do |val, i|
            instance_variable_set("@#{%w[x y z w].to_a[i]}", val)
          end
        end

        dimensions.times do |i|
          attr_reader %w[x y z w].to_a[i].to_sym
        end
      end

      const_set("Vec#{dimensions}", klass)
    end

    define_vector(2)
    define_vector(3)
    define_vector(4)

    <<#Add Cross to Vec3D>>
  end
#+END_SRC

* The Vector Behavior
#+BEGIN_SRC ruby :noweb-ref #Vector Behavior
    module VectorBehavior
        def coords
          instance_variables.map { |var| instance_variable_get(var) }
        end

        def +(other)
          self.class.new(*coords.zip(other.coords).map { |a, b| a + b })
        end

        def -(other)
          self.class.new(*coords.zip(other.coords).map { |a, b| a - b })
        end

        def *(scalar)
          self.class.new(*coords.map { |c| c * scalar })
        end

        def dot(other)
          coords.zip(other.coords).sum { |a, b| a * b }
        end

        def mag
          Math.sqrt(dot(self))
        end

        def norm
          len = mag
          self.class.new(*coords.map { |c| c / len })
        end

        def to_s
          "(#{coords.join(', ')})"
        end

        def ==(other)
          coords == other.coords
        end
      end
#+END_SRC

* Open Vec3D to add Cross method
#+BEGIN_SRC ruby :noweb-ref #Add Cross to Vec3D
    class Vec3
      def cross(other)
        self.class.new(
          y * other.z - z * other.y,
          z * other.x - x * other.z,
          x * other.y - y * other.x
        )
      end
    end
#+END_SRC
